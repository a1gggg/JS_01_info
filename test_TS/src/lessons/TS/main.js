// створення змінної user та присвоєння їй типів з TypeUser
var user;
//створення об'єкта user, який містить поля firstName, lastName, age та admin, який відповідає типу TypeUser
user = {};
// коментар до коду
// TypeScript - базові типи даних
// TypeScript - це надмножина JavaScript, яка додає статичну типізацію до мови.
// Це означає, що ви можете визначити типи змінних, функцій та інших елементів коду, що дозволяє виявляти помилки на етапі компіляції замість виконання програми.
// Це може допомогти вам уникнути багатьох помилок, які можуть виникнути під час виконання програми.
// TypeScript підтримує багато типів даних, які ви можете використовувати у вашому коді. Ось деякі з них:
// 1. Примітивні типи (Primitive types)
// 2. Об'єктні типи (Object types) - це типи, які представляють об'єкти, масиви, функції тощо.
// 3. Спеціальні типи (Special types) - це типи, які мають особливе призначення, такі як any, unknown, never тощо.
// 4. Типи, що описують структуру даних (Structural types) - це типи, які описують структуру даних, такі як інтерфейси та типи об'єктів.
// 5. Типи, що описують функції (Function types) - це типи, які описують функції, їх параметри та повернуті значення.
// 6. Типи, що описують класи (Class types) - це типи, які описують класи, їх властивості та методи.
// 7. Типи, що описують модулі (Module types) - це типи, які описують модулі, їх експортовані та імпортовані елементи.
// 8. Типи, що описують простори імен (Namespace types) - це типи, які описують простори імен, їх експортовані та імпортовані елементи.
// в прикладах змінних, які використовуються в коді, можуть бути змінені на ваш розсуд, щоб продемонструвати різні типи даних.

//РЯДОК
// тип string - це тип, який використовується для роботи з рядками. Наприклад, для роботи з текстовими даними.
// Рядки можуть бути визначені за допомогою одинарних або подвійних лапок.
let stringValue:string = "" // базовий тип рядок
stringValue = "Ruslan"

//ЧИСЛО
// тип number - це тип, який використовується для роботи з числами. Наприклад, для роботи з цілими та дробовими числами.
// Числа можуть бути представлені у десятковій, шістнадцятковій, двійковій або восьмирічній системах числення.
let numberValue:number = 10 // базовий тип число
numberValue = 10

//ЛОГІЧНИЙ
// тип boolean - це тип, який використовується для роботи з логічними значеннями. Наприклад, для роботи з істинними та хибними значеннями.
// Логічні значення можуть бути представлені як true або false.
let booleanValue:boolean = true // базовий тип логічний
booleanValue = false

//ОБ'ЄКТ
// тип object - це тип, який використовується для роботи з об'єктами. Наприклад, для роботи з масивами, функціями, класами тощо.
// Об'єкти можуть бути представлені як об'єкти, масиви, функції, класи тощо.
let objectValue:Object = {} // базовий тип об'єкт
objectValue = { name: "Ruslan" }

//UNDEFINED
// тип undefined - це тип, який використовується для роботи з невизначеними значеннями. Наприклад, для роботи з змінними, які не мають значення.
// Невизначені значення можуть бути представлені як undefined.
let undefinedValue:undefined = undefined // базовий тип невизначений
undefinedValue = undefined

//NULL
// тип null - це тип, який використовується для роботи з нульовими значеннями. Наприклад, для роботи з змінними, які не мають значення.
// Нульові значення можуть бути представлені як null.
let nullValue:null = null // базовий тип нульовий
nullValue = null

//МАСИВ
// тип Array - це тип, який використовується для роботи з масивами. Наприклад, для роботи з масивами чисел, рядків, об'єктів тощо.
// Масиви можуть бути представлені як масиви чисел, рядків, об'єктів тощо.
let arrayValue:Array<number> = [] // базовий тип масив
arrayValue = [1, 2, 3, 4, 5]

//МАСИВ РЯДКІВ
// тип Array<string> - це тип, який використовується для роботи з масивами рядків. Наприклад, для роботи з масивами рядків.
// Масиви рядків можуть бути представлені як масиви рядків.
let tupleValue:[string, number] = ["Ruslan", 10] // базовий тип кортеж
tupleValue = ["Ruslan", 10] // tupleValue = [10, "Ruslan"] // Error: Type 'number' is not assignable to type 'string'.

//БУДЬ-ЯКИЙ
// тип any - це тип, який може приймати будь-яке значення, але не дозволяє виконувати операції з цим значенням без перевірки його типу.
let anyValue:any = 10 // базовий тип будь-який, використовується дуже рідко!
anyValue = "Ruslan"
anyValue = true
anyValue = {} 
anyValue = []
anyValue = null
anyValue = undefined

//НЕВІДОМИЙ
// тип unknown - це тип, який може приймати будь-яке значення, але не дозволяє виконувати операції з цим значенням без перевірки його типу.
let unknownValue:unknown = 10 // базовий тип невідомий, використовується дуже рідко!
unknownValue = "Ruslan" // Error: Type 'string' is not assignable to type 'unknown'.

//ПУСТИЙ
// тип void - це тип, який використовується для функцій, які не повертають значення.
let voidValue:void = undefined // базовий тип порожній, пустий
voidValue = undefined
/*
тип void використовується для функцій, які не повертають значення. Наприклад прості функції, які виконують певну дію, але не повертають значення.
function voidFunction():void {
    console.log("Hello, World!")
}
voidFunction() // Hello, World! 
*/

//НІКОЛИ
// тип never - це тип, який використовується для функцій, які ніколи не повертають значення. Наприклад, функції, які завжди викликають помилку або безкінечний цикл.
let neverValue:never // базовий тип ніколи
// neverValue = (() => { throw new Error("Error") })()
// neverValue = (() => { while (true) {} })() // Infinite loop
// neverValue = (() => { return 10 })() // Error: Type 'number' is not assignable to type 'never'.

//
//
//Типи, які не є базовими
//СИМВОЛ
// тип symbol - це тип, який використовується для створення унікальних ідентифікаторів. Наприклад, для створення унікальних ключів для об'єктів.
let symbolValue: symbol = Symbol("symbol") // базовий тип символ
symbolValue = Symbol("symbol")

//ВЕЛИКЕ ЦІЛЕ ЧИСЛО
// тип bigint - це тип, який використовується для роботи з великими цілими числами. Наприклад, для роботи з великими числами, які не можуть бути представлені типом number.
let bigintValue: bigint = BigInt(10) // базовий тип великий ціле число
bigintValue = BigInt(10)
bigintValue = 10n // BigInt literal
bigintValue = BigInt("10")
bigintValue = BigInt("10.5") // Error: Cannot convert to BigInt
bigintValue = BigInt(10.5) // Error: Cannot convert to BigInt
bigintValue = BigInt("10.5") // Error: Cannot convert to BigInt
bigintValue = BigInt("10.5") // Error: Cannot convert to BigInt
bigintValue = BigInt("10.5") // Error: Cannot convert to BigInt

// створення типу для об'єкта user, який містить поля firstName, lastName, age та admin
// типи полів:
type TypeUser = {
  firstName: string;
  lastName: string;
  age: number;
  admin: boolean;
}
// створення змінної user та присвоєння їй типів з TypeUser
let user: TypeUser
//створення об'єкта user, який містить поля firstName, lastName, age та admin, який відповідає типу TypeUser
user = {

}
